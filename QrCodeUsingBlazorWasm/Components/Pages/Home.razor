@page "/"
@inject QRCodeGenerator QRCodeGenerator
@inject IJSRuntime JS

<PageTitle>QR Code Generator</PageTitle>

<div class="max-w-2xl mx-auto p-6 space-y-6">
    <h1 class="text-4xl font-bold text-center text-gray-800">QR Code Generator</h1>

    <div class="space-y-4">
        <label class="block text-lg font-medium text-gray-700">Select QR Code Type</label>
        <select @bind="selectedType" class="w-full p-2 border border-gray-300 rounded-md">
            @foreach (QRCodeType type in Enum.GetValues(typeof(QRCodeType)))
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>

    <div class="space-y-4">
        @switch (selectedType)
        {
            case QRCodeType.Url:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter URL" @bind="urlRecord.Url" />
                break;
            case QRCodeType.Sms:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Phone Number" @bind="smsRecord.Number" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Message" @bind="smsRecord.Message" />
                break;
            case QRCodeType.Email:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Email Address" @bind="emailRecord.Email" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Subject" @bind="emailRecord.Subject" />
                <textarea class="w-full p-2 border border-gray-300 rounded-md" placeholder="Message" @bind="emailRecord.Body"></textarea>
                break;
            case QRCodeType.VCard:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Full Name" @bind="vcardRecord.Name" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Organization" @bind="vcardRecord.Org" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Title" @bind="vcardRecord.Title" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Phone" @bind="vcardRecord.Phone" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Email" @bind="vcardRecord.Email" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Website" @bind="vcardRecord.Url" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Address" @bind="vcardRecord.Address" />
                break;
            case QRCodeType.Text:
                <textarea class="w-full p-2 border border-gray-300 rounded-md" placeholder="Enter plain text" @bind="textRecord.Text"></textarea>
                break;
            case QRCodeType.Wifi:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="SSID" @bind="wifiRecord.SSID" />
                <input type="password" class="w-full p-2 border border-gray-300 rounded-md" placeholder="Password" @bind="wifiRecord.Password" />
                <select class="w-full p-2 border border-gray-300 rounded-md" @bind="wifiRecord.Encryption">
                    <option value="WPA">WPA/WPA2</option>
                    <option value="WEP">WEP</option>
                    <option value="">None</option>
                </select>
                break;
            case QRCodeType.Phone:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Phone Number" @bind="phoneRecord.Number" />
                break;
            case QRCodeType.Geo:
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Latitude" @bind="geoRecord.Latitude" />
                <input class="w-full p-2 border border-gray-300 rounded-md" placeholder="Longitude" @bind="geoRecord.Longitude" />
                break;
        }
    </div>

    <button @onclick="GenerateQRCode" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md w-full">
        Generate QR Code
    </button>

    @if (!string.IsNullOrWhiteSpace(imageDataUrl))
    {
        <div class="text-center">
            <img src="@imageDataUrl" alt="QR Code" class="mx-auto rounded shadow-md mt-4" style="max-width: 200px; object-fit: contain;" />
            <button @onclick="SaveQRCode" class="mt-4 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md">
                Save QR Code
            </button>
        </div>
    }
</div>

@code {
    enum QRCodeType { Url, Sms, Email, VCard, Text, Wifi, Phone, Geo }

    QRCodeType selectedType = QRCodeType.Url;
    string imageDataUrl = string.Empty;

    class UrlRecord { public string Url { get; set; } = string.Empty; }
    class SmsRecord { public string Number { get; set; } = string.Empty; public string Message { get; set; } = string.Empty; }
    class EmailRecord { public string Email { get; set; } = string.Empty; public string Subject { get; set; } = string.Empty; public string Body { get; set; } = string.Empty; }
    class VCardRecord {
        public string Name { get; set; } = string.Empty;
        public string Org { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
    }
    class TextRecord { public string Text { get; set; } = string.Empty; }
    class WifiRecord { public string SSID { get; set; } = string.Empty; public string Password { get; set; } = string.Empty; public string Encryption { get; set; } = "WPA"; }
    class PhoneRecord { public string Number { get; set; } = string.Empty; }
    class GeoRecord { public string Latitude { get; set; } = string.Empty; public string Longitude { get; set; } = string.Empty; }

    UrlRecord urlRecord = new();
    SmsRecord smsRecord = new();
    EmailRecord emailRecord = new();
    VCardRecord vcardRecord = new();
    TextRecord textRecord = new();
    WifiRecord wifiRecord = new();
    PhoneRecord phoneRecord = new();
    GeoRecord geoRecord = new();

    private void GenerateQRCode()
    {
        string data = selectedType switch
        {
            QRCodeType.Url => urlRecord?.Url ?? string.Empty,
            QRCodeType.Sms => $"SMSTO:{smsRecord?.Number ?? string.Empty}:{smsRecord?.Message ?? string.Empty}",
            QRCodeType.Email => $"MATMSG:TO:{emailRecord?.Email ?? string.Empty};SUB:{emailRecord?.Subject ?? string.Empty};BODY:{emailRecord?.Body ?? string.Empty};;",
            QRCodeType.VCard => $"MECARD:N:{vcardRecord?.Name ?? string.Empty};ORG:{vcardRecord?.Org ?? string.Empty};TITLE:{vcardRecord?.Title ?? string.Empty};TEL:{vcardRecord?.Phone ?? string.Empty};EMAIL:{vcardRecord?.Email ?? string.Empty};URL:{vcardRecord?.Url ?? string.Empty};ADR:{vcardRecord?.Address ?? string.Empty};;",
            QRCodeType.Text => textRecord?.Text ?? string.Empty,
            QRCodeType.Wifi => $"WIFI:T:{wifiRecord?.Encryption ?? string.Empty};S:{wifiRecord?.SSID ?? string.Empty};P:{wifiRecord?.Password ?? string.Empty};;",
            QRCodeType.Phone => $"TEL:{phoneRecord?.Number ?? string.Empty}",
            QRCodeType.Geo => $"geo:{geoRecord?.Latitude ?? string.Empty},{geoRecord?.Longitude ?? string.Empty}",
            _ => string.Empty
        };

        if (string.IsNullOrWhiteSpace(data)) return;

        var qrCodeData = QRCodeGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
        var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeAsPngByteArr = qrCode.GetGraphic(20);
        var base64Image = Convert.ToBase64String(qrCodeAsPngByteArr);
        imageDataUrl = $"data:image/png;base64,{base64Image}";
    }

    private async Task SaveQRCode()
    {
        if (!string.IsNullOrEmpty(imageDataUrl))
        {
            var bytes = Convert.FromBase64String(imageDataUrl.Split(',')[1]);
            await JS.InvokeVoidAsync("downloadFileFromBytes", "qrcode.png", "image/png", bytes);
        }
    }
}
